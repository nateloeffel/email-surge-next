datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Experience {
    id              Int      @id @default(autoincrement())
    position_title  String
    from_date       String
    to_date         String
    duration        String?
    location        String
    description     String
    institution_name String
    linkedin_url    String?
    userProfileId   Int
    UserProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model Education {
    id              Int      @id @default(autoincrement())
    from_date       String?
    to_date         String?
    description     String
    degree          String
    institution_name String
    linkedin_url    String?
    userProfileId   Int
    UserProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model Interest {
    id              Int      @id @default(autoincrement())
    name            String
    userProfileId   Int
    UserProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model Accomplishment {
    id              Int      @id @default(autoincrement())
    category        String
    title           String
    userProfileId   Int
    UserProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model Contact {
    id              Int      @id @default(autoincrement())
    name            String
    occupation      String
    url             String
    userProfileId   Int
    UserProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model UserProfile {
    id              Int              @id @default(autoincrement())
    linkedin_url    String @unique
    name            String
    location        String
    email           String?
    about           String?
    experiences     Experience[]
    educations      Education[]
    interests       Interest[]
    accomplishments Accomplishment[]
    contacts        Contact[]
    company         String?
    job_title       String?
}
